// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Iec61499Bitstrings.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_CONVERSION_TESTS_MSG_IEC61499BITSTRINGS_H_
#define _FAST_DDS_GENERATED_CONVERSION_TESTS_MSG_IEC61499BITSTRINGS_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(IEC61499BITSTRINGS_SOURCE)
#define IEC61499BITSTRINGS_DllAPI __declspec( dllexport )
#else
#define IEC61499BITSTRINGS_DllAPI __declspec( dllimport )
#endif // IEC61499BITSTRINGS_SOURCE
#else
#define IEC61499BITSTRINGS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define IEC61499BITSTRINGS_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace conversion_tests {
    namespace msg {
        /*!
         * @brief This class represents the structure Iec61499Bitstrings defined by the user in the IDL file.
         * @ingroup Iec61499Bitstrings
         */
        class Iec61499Bitstrings
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Iec61499Bitstrings();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Iec61499Bitstrings();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object conversion_tests::msg::Iec61499Bitstrings that will be copied.
             */
            eProsima_user_DllExport Iec61499Bitstrings(
                    const Iec61499Bitstrings& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object conversion_tests::msg::Iec61499Bitstrings that will be copied.
             */
            eProsima_user_DllExport Iec61499Bitstrings(
                    Iec61499Bitstrings&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object conversion_tests::msg::Iec61499Bitstrings that will be copied.
             */
            eProsima_user_DllExport Iec61499Bitstrings& operator =(
                    const Iec61499Bitstrings& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object conversion_tests::msg::Iec61499Bitstrings that will be copied.
             */
            eProsima_user_DllExport Iec61499Bitstrings& operator =(
                    Iec61499Bitstrings&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x conversion_tests::msg::Iec61499Bitstrings object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const Iec61499Bitstrings& x) const;

            /*!
             * @brief Comparison operator.
             * @param x conversion_tests::msg::Iec61499Bitstrings object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const Iec61499Bitstrings& x) const;

            /*!
             * @brief This function sets a value in member a_byte
             * @param _a_byte New value for member a_byte
             */
            eProsima_user_DllExport void a_byte(
                    uint8_t _a_byte);

            /*!
             * @brief This function returns the value of member a_byte
             * @return Value of member a_byte
             */
            eProsima_user_DllExport uint8_t a_byte() const;

            /*!
             * @brief This function returns a reference to member a_byte
             * @return Reference to member a_byte
             */
            eProsima_user_DllExport uint8_t& a_byte();

            /*!
             * @brief This function sets a value in member a_word_word
             * @param _a_word_word New value for member a_word_word
             */
            eProsima_user_DllExport void a_word_word(
                    uint16_t _a_word_word);

            /*!
             * @brief This function returns the value of member a_word_word
             * @return Value of member a_word_word
             */
            eProsima_user_DllExport uint16_t a_word_word() const;

            /*!
             * @brief This function returns a reference to member a_word_word
             * @return Reference to member a_word_word
             */
            eProsima_user_DllExport uint16_t& a_word_word();

            /*!
             * @brief This function sets a value in member a_dword_dword
             * @param _a_dword_dword New value for member a_dword_dword
             */
            eProsima_user_DllExport void a_dword_dword(
                    uint32_t _a_dword_dword);

            /*!
             * @brief This function returns the value of member a_dword_dword
             * @return Value of member a_dword_dword
             */
            eProsima_user_DllExport uint32_t a_dword_dword() const;

            /*!
             * @brief This function returns a reference to member a_dword_dword
             * @return Reference to member a_dword_dword
             */
            eProsima_user_DllExport uint32_t& a_dword_dword();

            /*!
             * @brief This function sets a value in member a_lword_lword
             * @param _a_lword_lword New value for member a_lword_lword
             */
            eProsima_user_DllExport void a_lword_lword(
                    uint64_t _a_lword_lword);

            /*!
             * @brief This function returns the value of member a_lword_lword
             * @return Value of member a_lword_lword
             */
            eProsima_user_DllExport uint64_t a_lword_lword() const;

            /*!
             * @brief This function returns a reference to member a_lword_lword
             * @return Reference to member a_lword_lword
             */
            eProsima_user_DllExport uint64_t& a_lword_lword();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const conversion_tests::msg::Iec61499Bitstrings& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint8_t m_a_byte;
            uint16_t m_a_word_word;
            uint32_t m_a_dword_dword;
            uint64_t m_a_lword_lword;

        };
    } // namespace msg
} // namespace conversion_tests

#endif // _FAST_DDS_GENERATED_CONVERSION_TESTS_MSG_IEC61499BITSTRINGS_H_

