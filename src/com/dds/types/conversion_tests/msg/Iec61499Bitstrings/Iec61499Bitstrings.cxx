// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Iec61499Bitstrings.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Iec61499Bitstrings.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define conversion_tests_msg_Iec61499Bitstrings_max_cdr_typesize 16ULL;
#define conversion_tests_msg_Iec61499Bitstrings_max_key_cdr_typesize 0ULL;

conversion_tests::msg::Iec61499Bitstrings::Iec61499Bitstrings()
{
    // octet m_a_byte
    m_a_byte = 0;
    // unsigned short m_a_word_word
    m_a_word_word = 0;
    // unsigned long m_a_dword_dword
    m_a_dword_dword = 0;
    // unsigned long long m_a_lword_lword
    m_a_lword_lword = 0;

}

conversion_tests::msg::Iec61499Bitstrings::~Iec61499Bitstrings()
{




}

conversion_tests::msg::Iec61499Bitstrings::Iec61499Bitstrings(
        const Iec61499Bitstrings& x)
{
    m_a_byte = x.m_a_byte;
    m_a_word_word = x.m_a_word_word;
    m_a_dword_dword = x.m_a_dword_dword;
    m_a_lword_lword = x.m_a_lword_lword;
}

conversion_tests::msg::Iec61499Bitstrings::Iec61499Bitstrings(
        Iec61499Bitstrings&& x) noexcept 
{
    m_a_byte = x.m_a_byte;
    m_a_word_word = x.m_a_word_word;
    m_a_dword_dword = x.m_a_dword_dword;
    m_a_lword_lword = x.m_a_lword_lword;
}

conversion_tests::msg::Iec61499Bitstrings& conversion_tests::msg::Iec61499Bitstrings::operator =(
        const Iec61499Bitstrings& x)
{

    m_a_byte = x.m_a_byte;
    m_a_word_word = x.m_a_word_word;
    m_a_dword_dword = x.m_a_dword_dword;
    m_a_lword_lword = x.m_a_lword_lword;

    return *this;
}

conversion_tests::msg::Iec61499Bitstrings& conversion_tests::msg::Iec61499Bitstrings::operator =(
        Iec61499Bitstrings&& x) noexcept
{

    m_a_byte = x.m_a_byte;
    m_a_word_word = x.m_a_word_word;
    m_a_dword_dword = x.m_a_dword_dword;
    m_a_lword_lword = x.m_a_lword_lword;

    return *this;
}

bool conversion_tests::msg::Iec61499Bitstrings::operator ==(
        const Iec61499Bitstrings& x) const
{

    return (m_a_byte == x.m_a_byte && m_a_word_word == x.m_a_word_word && m_a_dword_dword == x.m_a_dword_dword && m_a_lword_lword == x.m_a_lword_lword);
}

bool conversion_tests::msg::Iec61499Bitstrings::operator !=(
        const Iec61499Bitstrings& x) const
{
    return !(*this == x);
}

size_t conversion_tests::msg::Iec61499Bitstrings::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return conversion_tests_msg_Iec61499Bitstrings_max_cdr_typesize;
}

size_t conversion_tests::msg::Iec61499Bitstrings::getCdrSerializedSize(
        const conversion_tests::msg::Iec61499Bitstrings& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void conversion_tests::msg::Iec61499Bitstrings::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_a_byte;
    scdr << m_a_word_word;
    scdr << m_a_dword_dword;
    scdr << m_a_lword_lword;

}

void conversion_tests::msg::Iec61499Bitstrings::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_a_byte;
    dcdr >> m_a_word_word;
    dcdr >> m_a_dword_dword;
    dcdr >> m_a_lword_lword;
}

/*!
 * @brief This function sets a value in member a_byte
 * @param _a_byte New value for member a_byte
 */
void conversion_tests::msg::Iec61499Bitstrings::a_byte(
        uint8_t _a_byte)
{
    m_a_byte = _a_byte;
}

/*!
 * @brief This function returns the value of member a_byte
 * @return Value of member a_byte
 */
uint8_t conversion_tests::msg::Iec61499Bitstrings::a_byte() const
{
    return m_a_byte;
}

/*!
 * @brief This function returns a reference to member a_byte
 * @return Reference to member a_byte
 */
uint8_t& conversion_tests::msg::Iec61499Bitstrings::a_byte()
{
    return m_a_byte;
}

/*!
 * @brief This function sets a value in member a_word_word
 * @param _a_word_word New value for member a_word_word
 */
void conversion_tests::msg::Iec61499Bitstrings::a_word_word(
        uint16_t _a_word_word)
{
    m_a_word_word = _a_word_word;
}

/*!
 * @brief This function returns the value of member a_word_word
 * @return Value of member a_word_word
 */
uint16_t conversion_tests::msg::Iec61499Bitstrings::a_word_word() const
{
    return m_a_word_word;
}

/*!
 * @brief This function returns a reference to member a_word_word
 * @return Reference to member a_word_word
 */
uint16_t& conversion_tests::msg::Iec61499Bitstrings::a_word_word()
{
    return m_a_word_word;
}

/*!
 * @brief This function sets a value in member a_dword_dword
 * @param _a_dword_dword New value for member a_dword_dword
 */
void conversion_tests::msg::Iec61499Bitstrings::a_dword_dword(
        uint32_t _a_dword_dword)
{
    m_a_dword_dword = _a_dword_dword;
}

/*!
 * @brief This function returns the value of member a_dword_dword
 * @return Value of member a_dword_dword
 */
uint32_t conversion_tests::msg::Iec61499Bitstrings::a_dword_dword() const
{
    return m_a_dword_dword;
}

/*!
 * @brief This function returns a reference to member a_dword_dword
 * @return Reference to member a_dword_dword
 */
uint32_t& conversion_tests::msg::Iec61499Bitstrings::a_dword_dword()
{
    return m_a_dword_dword;
}

/*!
 * @brief This function sets a value in member a_lword_lword
 * @param _a_lword_lword New value for member a_lword_lword
 */
void conversion_tests::msg::Iec61499Bitstrings::a_lword_lword(
        uint64_t _a_lword_lword)
{
    m_a_lword_lword = _a_lword_lword;
}

/*!
 * @brief This function returns the value of member a_lword_lword
 * @return Value of member a_lword_lword
 */
uint64_t conversion_tests::msg::Iec61499Bitstrings::a_lword_lword() const
{
    return m_a_lword_lword;
}

/*!
 * @brief This function returns a reference to member a_lword_lword
 * @return Reference to member a_lword_lword
 */
uint64_t& conversion_tests::msg::Iec61499Bitstrings::a_lword_lword()
{
    return m_a_lword_lword;
}



size_t conversion_tests::msg::Iec61499Bitstrings::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return conversion_tests_msg_Iec61499Bitstrings_max_key_cdr_typesize;
}

bool conversion_tests::msg::Iec61499Bitstrings::isKeyDefined()
{
    return false;
}

void conversion_tests::msg::Iec61499Bitstrings::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}



